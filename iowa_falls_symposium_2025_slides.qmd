---
title: "On Not Falling Short"
subtitle: "Injury Epidemiology of Falls in Iowa"
author: "Nicolas Foss, Ed.D., MS"
date: "2025-09-26" # adjust to actual date
format: 
  letterbox-revealjs:
    theme: custom.scss
    footer: "Iowa Falls Symposium 2025"
    logo: HHS_PH_horiz_color_print.jpg
    transition: slide
    menu: true
    slide-number: false
    self-contained: true
    toc: false
    code-overflow: wrap
    notes: true
    title-slide-attributes:
      class: title-slide
      data-background-color: white # your primary blue
      data-background-size: cover
      data-background-position: center
execute: 
  echo: true
  warning: false
  message: false
  eval: false
---

```{r plot_text_setup, echo=FALSE}
###_____________________________________________________________________________
# showtext setup ----
###_____________________________________________________________________________

# run showtext auto, use throughout project
showtext::showtext_auto()

# get 300 dpi with showtext
showtext::showtext_opts(dpi = 300)

# get work sans fonts of interest
all_fonts <- systemfonts::system_fonts()

# regular
work_sans <- all_fonts |>
  dplyr::filter(name == "WorkSans-Regular") |>
  dplyr::pull(path)

# semibold
work_sans_semibold <- all_fonts |>
  dplyr::filter(name == "WorkSans-SemiBold") |>
  dplyr::pull(path)

# extrabold
work_sans_extrabold <- all_fonts |>
  dplyr::filter(name == "WorkSans-ExtraBold") |>
  dplyr::pull(path)

# use sysfonts to load the fonts
sysfonts::font_add(
  family = "Work Sans",
  regular = work_sans,
  bold = work_sans_extrabold
)
```

```{r setup, echo=FALSE}

# Get path to figures folder
figures <- Sys.getenv("figures_folder")

# Path to needed functions
setup <- Sys.getenv("setup_file")

# clinical data

# trauma environment variables ----
trauma_data_path_2020 <- Sys.getenv("trauma_data_2020")
trauma_data_path_2021 <- Sys.getenv("trauma_data_2021")
trauma_data_path_2022 <- Sys.getenv("trauma_data_2022")
trauma_data_path_2023 <- Sys.getenv("trauma_data_2023")
trauma_data_path_2024 <- Sys.getenv("trauma_data_2024")

# files for classification environment variables ----
mech_injury_path <- Sys.getenv("mech_injury_map")
injury_matrix_path <- Sys.getenv("injury_matrix")
iowa_counties_districts_path <- Sys.getenv("iowa_counties_districts")
hospital_data_path <- Sys.getenv("hospital_data_folder")

# Get needed custom functions into memory
source(setup)

###_____________________________________________________________________________
# Load the files used to categorize mechanism and nature of injury ----
# based on the ICD-10 injury code
# NOTICE THAT IN ORDER TO GET THE SAME COUNTS AS IN TABLEAU WITH REGARD TO THE
# CAUSE OF INJURY / NATURE OF INJURY / body region (lvl1 and lvl2) you must run
# RUN distinct(Unique_Incident_ID, [coi_ar, cc2, body region], .keep_all = TRUE)
# and then your count() function or else you will not get the same counts in R.
# Tableau does a better job of automating the grouping via AI, and in R you have
# to do that manually.
###_____________________________________________________________________________

# mechanism of injury mapping ----
mechanism_injury_mapping <- readr::read_csv(
  file = mech_injury_path
)

# select variables of interest for mappings
mechanism_injury_mapping <- mechanism_injury_mapping |>
  dplyr::select(
    UPPER_CODE,
    INTENTIONALITY,
    CUSTOM_CATEGORY2,
    CAUSE_OF_INJURY_AR
  )

# nature of injury mapping ----
nature_injury_mapping <- readxl::read_excel(path = injury_matrix_path)

# select variables of interest for mappings
nature_injury_mapping <- nature_injury_mapping |>
  dplyr::select(
    ICD_10_CODE_TRIM,
    NATURE_OF_INJURY_DESCRIPTOR,
    BODY_REGION_CATEGORY_LEVEL_1,
    BODY_REGION_CATEGORY_LEVEL_2
  )

# classify counties in the data ----
location_data <- readxl::read_excel(path = iowa_counties_districts_path)

# select variables of interest for Iowa county classification
location_data <- location_data |>
  dplyr::select(County, Designation, Urbanicity)

# classify IPOP data using hospital information ----
hospital_data <- readxl::read_excel(path = hospital_data_path) |>
  janitor::clean_names(case = "screaming_snake")

### trauma data ----
trauma_data_2020 <- readr::read_csv(file = trauma_data_path_2020)
trauma_data_2021 <- readr::read_csv(file = trauma_data_path_2021)
trauma_data_2022 <- readr::read_csv(file = trauma_data_path_2022)
trauma_data_2023 <- readr::read_csv(file = trauma_data_path_2023)
trauma_data_2024 <- readr::read_csv(file = trauma_data_path_2024)

# union the trauma data
trauma_data <- dplyr::bind_rows(
  trauma_data_2020 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2021 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2022 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2023 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    )),
  trauma_data_2024 |>
    dplyr::mutate(dplyr::across(
      .cols = tidyselect::matches("_zip$"),
      ~ as.character(.)
    ))
)

# deal with missing values in cause of injury categories
trauma_data_clean <- trauma_data |>
  dplyr::mutate(
    Age_Group = dplyr::case_when(
      Patient_Age_Years < 5 ~ "0-4",
      Patient_Age_Years >= 5 & Patient_Age_Years < 10 ~ "5-9",
      Patient_Age_Years >= 10 & Patient_Age_Years < 15 ~ "10-14",
      Patient_Age_Years >= 15 & Patient_Age_Years < 20 ~ "15-19",
      Patient_Age_Years >= 20 & Patient_Age_Years < 25 ~ "20-24",
      Patient_Age_Years >= 25 & Patient_Age_Years < 30 ~ "25-29",
      Patient_Age_Years >= 30 & Patient_Age_Years < 35 ~ "30-34",
      Patient_Age_Years >= 35 & Patient_Age_Years < 40 ~ "35-39",
      Patient_Age_Years >= 40 & Patient_Age_Years < 45 ~ "40-44",
      Patient_Age_Years >= 45 & Patient_Age_Years < 50 ~ "45-49",
      Patient_Age_Years >= 50 & Patient_Age_Years < 55 ~ "50-54",
      Patient_Age_Years >= 55 & Patient_Age_Years < 60 ~ "55-59",
      Patient_Age_Years >= 60 & Patient_Age_Years < 65 ~ "60-64",
      Patient_Age_Years >= 65 & Patient_Age_Years < 70 ~ "65-69",
      Patient_Age_Years >= 70 & Patient_Age_Years < 75 ~ "70-74",
      Patient_Age_Years >= 75 & Patient_Age_Years < 80 ~ "75-79",
      Patient_Age_Years >= 80 & Patient_Age_Years < 85 ~ "80-84",
      Patient_Age_Years >= 85 ~ "85+",
      TRUE ~ "Missing",
      .default = "Missing"
    ),
    Age_Group = factor(
      Age_Group,
      levels = c(
        "0-4",
        "5-9",
        "10-14",
        "15-19",
        "20-24",
        "25-29",
        "30-34",
        "35-39",
        "40-44",
        "45-49",
        "50-54",
        "55-59",
        "60-64",
        "65-69",
        "70-74",
        "75-79",
        "80-84",
        "85+",
        "Missing"
      )
    ),
    .after = Age_Range
  ) |>
  dplyr::mutate(
    Injury_County = stringr::str_to_title(Injury_County),
    Injury_County = dplyr::if_else(
      grepl(pattern = "o'b", x = Injury_County, ignore.case = TRUE),
      "O'Brien",
      Injury_County
    ),
    NATURE_OF_INJURY_DESCRIPTOR_1 = dplyr::if_else(
      is.na(NATURE_OF_INJURY_DESCRIPTOR_1),
      NATURE_OF_INJURY_DESCRIPTOR_2,
      NATURE_OF_INJURY_DESCRIPTOR_1
    ),
    BODY_REGION_CATEGORY_LEVEL_1_1 = dplyr::if_else(
      is.na(BODY_REGION_CATEGORY_LEVEL_1_1),
      BODY_REGION_CATEGORY_LEVEL_1_2,
      BODY_REGION_CATEGORY_LEVEL_1_1
    ),
    BODY_REGION_CATEGORY_LEVEL_2_1 = dplyr::if_else(
      is.na(BODY_REGION_CATEGORY_LEVEL_2_1),
      BODY_REGION_CATEGORY_LEVEL_2_2,
      BODY_REGION_CATEGORY_LEVEL_2_1
    ),
    BODY_REGION_CATEGORY_LEVEL_3_1 = dplyr::if_else(
      is.na(BODY_REGION_CATEGORY_LEVEL_3_1),
      BODY_REGION_CATEGORY_LEVEL_3_2,
      BODY_REGION_CATEGORY_LEVEL_3_1
    ),
    INTENTIONALITY_1 = dplyr::if_else(
      is.na(INTENTIONALITY_1),
      INTENTIONALITY_2,
      INTENTIONALITY_1
    ),
    MECHANISM_1 = dplyr::if_else(is.na(MECHANISM_1), MECHANISM_2, MECHANISM_1),
    LEVEL_FALL1_1 = dplyr::if_else(
      is.na(LEVEL_FALL1_1),
      LEVEL_FALL1_2,
      LEVEL_FALL1_1
    ),
    CAUSE_OF_INJURY_AR_1 = dplyr::if_else(
      is.na(CAUSE_OF_INJURY_AR_1),
      CAUSE_OF_INJURY_AR_2,
      CAUSE_OF_INJURY_AR_1
    )
  ) |>
  dplyr::left_join(location_data, by = c("Patient_County" = "County")) |>
  dplyr::rename(
    Designation_Patient = Designation,
    Urbanicity_Patient = Urbanicity
  ) |>
  dplyr::relocate(
    tidyselect::all_of(c("Designation_Patient", "Urbanicity_Patient")),
    .after = Patient_County
  ) |>
  dplyr::left_join(location_data, by = c("Injury_County" = "County")) |>
  dplyr::rename(
    Designation_Injury = Designation,
    Urbanicity_Injury = Urbanicity
  ) |>
  dplyr::relocate(
    tidyselect::all_of(c("Designation_Injury", "Urbanicity_Injury")),
    .after = Injury_County
  ) |>
  dplyr::left_join(location_data, by = "County") |>
  dplyr::relocate(
    tidyselect::all_of(c("Designation", "Urbanicity")),
    .after = County
  )

# get the trauma data for the year of interest
trauma_2024 <- trauma_data_clean |> dplyr::filter(Year == 2024)
``` 


# Objectives
Today, we will learn:

- overall statistics on falls
- survival among patients who fell
- the distribution of falls across: 
  - demographic groups
  - geographic areas

# About the data
Source: Iowa Trauma Registry from 2020-2024.

::: {.incremental}

- Check out [Trauma Data Registry](https://hhs.iowa.gov/health-prevention/providers-professionals/emergency-medical-services-trauma/trauma-system-resources/trauma-data-registry) for inclusion criteria.
- The trauma registry...
  - ...houses data on the most severe injuries.
  - ...does not register all injuries in Iowa.
    - Iowa Hospital Association's Inpatient Outpatient dataset = comprehensive

:::

```{r initial_counts, echo=FALSE}

# Get counts
falls_counts <- trauma_data_clean |>
  dplyr::mutate(
    falls = dplyr::if_else(
      !grepl(pattern = "fall", x = CAUSE_OF_INJURY_AR_1, ignore.case = TRUE),
      "Other Injury",
      CAUSE_OF_INJURY_AR_1,
      missing = "Missing"
    )
  ) |>
  injury_incident_count(Year, falls) |>
  tidyr::pivot_wider(id_cols = Year, names_from = falls, values_from = n) |>
  dplyr::rowwise() |>
  dplyr::mutate(
    prop_all_falls = Fall / rowSums(dplyr::across(Fall:`Other Injury`)),
    prop_same_level = `Fall - Same Level` /
      rowSums(dplyr::across(Fall:`Other Injury`)),
    prop_other = `Other Injury` / rowSums(dplyr::across(Fall:`Other Injury`)),
    prop_falls = (Fall + `Fall - Same Level`) /
      rowSums(dplyr::across(Fall:`Other Injury`))
  ) |>
  dplyr::relocate(prop_all_falls, .after = Fall) |>
  dplyr::relocate(prop_same_level, .after = `Fall - Same Level`) |>
  dplyr::relocate(prop_other, .after = `Other Injury`)

# gt table to show counts
falls_counts_gt <- falls_counts |>
  gt::gt() |>
  gt::fmt_number(
    columns = c(Fall, `Fall - Same Level`, `Other Injury`),
    drop_trailing_zeros = TRUE
  ) |>
  gt::fmt_percent(
    columns = tidyselect::matches("prop"),
    drop_trailing_zeros = TRUE
  ) |>
  gt::cols_label(
    tidyselect::matches("same") ~ "Same Level",
    "prop_all_falls" ~ "% Falls",
    "prop_same_level" ~ "% Same Level",
    "prop_other" ~ "% Other Injury",
    prop_falls ~ "% Any Falls"
  ) |>
  gt::cols_merge(columns = Fall:prop_all_falls, pattern = "{1} ({2})") |>
  gt::cols_merge(
    columns = `Fall - Same Level`:prop_same_level,
    pattern = "{1} ({2})"
  ) |>
  gt::cols_merge(columns = `Other Injury`:prop_other, pattern = "{1} ({2})") |>
  tab_style_hhs(border_cols = Fall:prop_all_falls)

# save the gt table
gt::gtsave(
  data = falls_counts_gt,
  filename = "falls_count_gt.png",
  vwidth = 800,
  vheight = 800 / 1.333333,
  path = figures
)

```

# Falls at a glance
Year over year, since 2020, falls make up > 55% of all injury events in Iowa. Same-level falls grow rapidly.

![](figures/falls_count_gt.png){fig-alt="A statistical table showing counts of fall events in Iowa since 2020." fig-cap=""}
